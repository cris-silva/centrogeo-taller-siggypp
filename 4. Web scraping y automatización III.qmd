---
title: "4. Web scraping y automatización III"
format: html
editor: visual
---

## Introducción

## Objetivo

## Preparación del entorno

```{r Cargar los paquetes}
library(tidyverse)
library(janitor)
library(rvest)
library(RSelenium)
library(tidygeocoder)
library(sf)
library(tmap)
```

### Iniciar servidor de Selenium

```{r Iniciar Selenium}
servidor_selenium <- rsDriver(browser = "firefox")
```

```{r Crear el controlador del explorador web}
controlador <- servidor_selenium$client
```

### Identificación de los controles de la página

```{r Abrir la página de descarga}
pagina_ficha <- "https://catalogonacionalmhi.inah.gob.mx/consulta_publica/detalle/"
id_ficha <- 90000

controlador$navigate(str_c(pagina_ficha, id_ficha))
```

Esperar a que cargue la página:

```{r Definir tiempo de espera de Selenium}
# Establecer el tiempo de espera de Selenium para que aparezcan los elementos a 5 s
controlador$setImplicitWaitTimeout(5000)

# Esperar 5 s a que cargue la página
Sys.sleep(5000)
```

Expandir todos los contenedores de la ficha:

```{r Expandir contenedores}
# Crear una instancia del botón Expandir todos:
boton_expandir_todos <- controlador$findElement(using = "xpath",
                                                value = '//*[@id="btnExpandir"]')

# Presionar el botón para expandir los contenedores
boton_expandir_todos$clickElement()
```

Descargar el código fuente de la página:

```{r Guardar el código fuente de la ficha}
# Guarda el contenido de la página en una variable
codigo_fuente <- controlador$getPageSource()

# Extraer con rvest el código fuente de la lista obtenida con Selenium:
html_ficha <- 
  read_html(codigo_fuente[[1]])
```

### Extracción de los campos:

```{r Extraer tipo de inmueble}
# Buscar la cabecera, extraer y limpiar el texto del tipo de inmueble
datos_contenedor_1 <-
  html_ficha %>% 
  html_element(xpath = '//*[@id="clasif"]') %>% # Buscar el elemento del título
  html_text() %>% # Extraer el texto del elemento
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

# Ver el resultado
datos_contenedor_1
```

```{r Extraer datos del primer contenedor}
# Buscar el siguiente contenedor y extraer los datos
datos_contenedor_2 <-
  html_ficha %>% 
  html_element(xpath = '//*[@id="encabezado"]/div/div[2]/div[1]') %>% # Buscar el siguiente contenedor
  html_elements("p") %>% # Buscar los elementos etiquetados como párrafos (p)
  html_text() %>% # Extraer el texto de cada elemento que se encontró
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

# Ver el resultado
datos_contenedor_2
```

class="col-md-12 margen-inferior-xs "

```{r}
# Buscar el siguiente contenedor y extraer los datos
datos_contenedor_3 <-
  html_ficha %>% 
  html_element(xpath = '//*[@id="divSeccion1"]') %>% # Buscar el siguiente contenedor
  html_elements(css = 'div.col-md-12.margen-inferior-xs') %>% # Buscar los elementos que tengan este formato CSS
  html_text() %>% # Extraer el texto de cada elemento que se encontró
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

# Ver el resultado
datos_contenedor_3
```

```{r}
# Buscar el siguiente contenedor y extraer los datos
datos_contenedor_4 <-
  html_ficha %>% 
  html_element(xpath = '//*[@id="divSeccion2"]') %>% # Buscar el siguiente contenedor
  html_elements(css = 'div.col-md-4') %>% # Buscar los elementos que tengan este formato CSS
  html_text() %>% # Extraer el texto de cada elemento que se encontró
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

# Ver el resultado
datos_contenedor_4
```

```{r}
# Buscar el siguiente contenedor y extraer los datos
contenedor_5 <-
  html_ficha %>% 
  html_element(xpath = '//*[@id="divSeccion3"]') # Buscar el siguiente contenedor
  
datos_contenedor_5_1 <-
  contenedor_5 %>% 
  html_elements(xpath = '//*[@id="divSeccion3"]/div[1]/div/div') %>% # Buscar el elemento donde está el dato
  html_text() %>% # Extraer el texto de cada elemento que se encontró
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto


datos_contenedor_5_2 <-
  contenedor_5 %>% 
  html_elements(css = 'div.col-md-4') %>% # Buscar los elementos que tengan este formato CSS
  html_text() %>% # Extraer el texto de cada elemento que se encontró
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

datos_contenedor_5_3 <-
  contenedor_5 %>% 
  html_elements(xpath = '//*[@id="divSeccion3"]/div[9]/div/div/div') %>% # Buscar el elemento donde está el dato
  html_text() %>% # Extraer el texto de cada elemento que se encontró
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

# Ver el resultado
datos_contenedor_5_1
datos_contenedor_5_2
datos_contenedor_5_3
```

class="row margen-superior"

En este caso algunas filas usan el estilo "row" y otras el estilo "row margen-superior", será más conveniente extraer todo el texto y separarlo usando delimitadores:

```{r}
# Buscar el siguiente contenedor y extraer los datos
datos_contenedor_6 <-
  html_ficha %>% 
  html_element(xpath = '//*[@id="divSeccion4"]') %>% # Buscar el siguiente contenedor
  html_text() %>% # Extraer el texto de cada elemento que se encontró
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

# Definir entre qué textos se va a poner el separador
campos_6 <- c("Folio Real RPMZAH:",
              "Declaratoria de Monumento Histórico:",
              "Folio y Denominación ZMH:",
              "Listado en Declaratoria de Zona de Monumentos Históricos:",
              "Ubicado en la Zona de Monumentos Históricos:",
              "Sitio Inscrito en la lista de patrimonio Mundial UNESCO:")

# Reemplazar cada uno de los campos por el mismo texto anteponiendo el separador |
for(campo in campos_6) {
  datos_contenedor_6 <-
    datos_contenedor_6 %>% 
    str_replace(campo, str_c("| ", campo)) # Reemplazar por su versión con separador
}

# Separación y limpieza final:
datos_contenedor_6 <-
  str_split(datos_contenedor_6, pattern = "\\|") %>% # Separar donde esté el separador
  unlist() %>% # Convertir la lista en un vector de caracteres
  str_remove_all("\n") %>% # Eliminar todos los saltos de línea
  str_squish() # Eliminar los espacios en blanco antes y después del texto

# Ver el resultado
datos_contenedor_6
```

NOTA: NO HICE UNA FUNCIÓN POR QUE CADA DIV ESTÁ CONSTRUIDO DIFERENTE

Cierra las ventanas abiertas del explorador y apaga el servidor de *Selenium*:

```{r Cerrar explorador y servidor de Selenium}
# Cerrar todas las ventanas abiertas
controlador$closeall()

# Apagar el servidor de Selenium
servidor_selenium$server$stop()
```
